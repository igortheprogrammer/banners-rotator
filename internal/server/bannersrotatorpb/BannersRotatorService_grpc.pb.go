// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: BannersRotatorService.proto

package bannersrotatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannersRotatorClient is the client API for BannersRotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannersRotatorClient interface {
	CreateSlot(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Slot, error)
	CreateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*Banner, error)
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	CreateRotation(ctx context.Context, in *Rotation, opts ...grpc.CallOption) (*Message, error)
	DeleteRotation(ctx context.Context, in *Rotation, opts ...grpc.CallOption) (*Message, error)
	CreateClickEvent(ctx context.Context, in *ClickEvent, opts ...grpc.CallOption) (*Message, error)
	BannerForSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*Banner, error)
}

type bannersRotatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBannersRotatorClient(cc grpc.ClientConnInterface) BannersRotatorClient {
	return &bannersRotatorClient{cc}
}

func (c *bannersRotatorClient) CreateSlot(ctx context.Context, in *Slot, opts ...grpc.CallOption) (*Slot, error) {
	out := new(Slot)
	err := c.cc.Invoke(ctx, "/bannersrotator.BannersRotator/CreateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotatorClient) CreateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, "/bannersrotator.BannersRotator/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotatorClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/bannersrotator.BannersRotator/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotatorClient) CreateRotation(ctx context.Context, in *Rotation, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/bannersrotator.BannersRotator/CreateRotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotatorClient) DeleteRotation(ctx context.Context, in *Rotation, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/bannersrotator.BannersRotator/DeleteRotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotatorClient) CreateClickEvent(ctx context.Context, in *ClickEvent, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/bannersrotator.BannersRotator/CreateClickEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotatorClient) BannerForSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, "/bannersrotator.BannersRotator/BannerForSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannersRotatorServer is the server API for BannersRotator service.
// All implementations must embed UnimplementedBannersRotatorServer
// for forward compatibility
type BannersRotatorServer interface {
	CreateSlot(context.Context, *Slot) (*Slot, error)
	CreateBanner(context.Context, *Banner) (*Banner, error)
	CreateGroup(context.Context, *Group) (*Group, error)
	CreateRotation(context.Context, *Rotation) (*Message, error)
	DeleteRotation(context.Context, *Rotation) (*Message, error)
	CreateClickEvent(context.Context, *ClickEvent) (*Message, error)
	BannerForSlot(context.Context, *SlotRequest) (*Banner, error)
	mustEmbedUnimplementedBannersRotatorServer()
}

// UnimplementedBannersRotatorServer must be embedded to have forward compatible implementations.
type UnimplementedBannersRotatorServer struct {
}

func (UnimplementedBannersRotatorServer) CreateSlot(context.Context, *Slot) (*Slot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedBannersRotatorServer) CreateBanner(context.Context, *Banner) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedBannersRotatorServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedBannersRotatorServer) CreateRotation(context.Context, *Rotation) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRotation not implemented")
}
func (UnimplementedBannersRotatorServer) DeleteRotation(context.Context, *Rotation) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRotation not implemented")
}
func (UnimplementedBannersRotatorServer) CreateClickEvent(context.Context, *ClickEvent) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClickEvent not implemented")
}
func (UnimplementedBannersRotatorServer) BannerForSlot(context.Context, *SlotRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerForSlot not implemented")
}
func (UnimplementedBannersRotatorServer) mustEmbedUnimplementedBannersRotatorServer() {}

// UnsafeBannersRotatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannersRotatorServer will
// result in compilation errors.
type UnsafeBannersRotatorServer interface {
	mustEmbedUnimplementedBannersRotatorServer()
}

func RegisterBannersRotatorServer(s grpc.ServiceRegistrar, srv BannersRotatorServer) {
	s.RegisterService(&BannersRotator_ServiceDesc, srv)
}

func _BannersRotator_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bannersrotator.BannersRotator/CreateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).CreateSlot(ctx, req.(*Slot))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotator_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Banner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bannersrotator.BannersRotator/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).CreateBanner(ctx, req.(*Banner))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotator_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bannersrotator.BannersRotator/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotator_CreateRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rotation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).CreateRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bannersrotator.BannersRotator/CreateRotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).CreateRotation(ctx, req.(*Rotation))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotator_DeleteRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rotation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).DeleteRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bannersrotator.BannersRotator/DeleteRotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).DeleteRotation(ctx, req.(*Rotation))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotator_CreateClickEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).CreateClickEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bannersrotator.BannersRotator/CreateClickEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).CreateClickEvent(ctx, req.(*ClickEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotator_BannerForSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).BannerForSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bannersrotator.BannersRotator/BannerForSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).BannerForSlot(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannersRotator_ServiceDesc is the grpc.ServiceDesc for BannersRotator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannersRotator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bannersrotator.BannersRotator",
	HandlerType: (*BannersRotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSlot",
			Handler:    _BannersRotator_CreateSlot_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _BannersRotator_CreateBanner_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _BannersRotator_CreateGroup_Handler,
		},
		{
			MethodName: "CreateRotation",
			Handler:    _BannersRotator_CreateRotation_Handler,
		},
		{
			MethodName: "DeleteRotation",
			Handler:    _BannersRotator_DeleteRotation_Handler,
		},
		{
			MethodName: "CreateClickEvent",
			Handler:    _BannersRotator_CreateClickEvent_Handler,
		},
		{
			MethodName: "BannerForSlot",
			Handler:    _BannersRotator_BannerForSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BannersRotatorService.proto",
}
